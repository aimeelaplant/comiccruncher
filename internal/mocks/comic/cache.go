// Code generated by MockGen. DO NOT EDIT.
// Source: comic/cache.go

// Package mock_comic is a generated GoMock package.
package mock_comic

import (
	comic "github.com/aimeelaplant/comiccruncher/comic"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSyncer is a mock of Syncer interface
type MockSyncer struct {
	ctrl     *gomock.Controller
	recorder *MockSyncerMockRecorder
}

// MockSyncerMockRecorder is the mock recorder for MockSyncer
type MockSyncerMockRecorder struct {
	mock *MockSyncer
}

// NewMockSyncer creates a new mock instance
func NewMockSyncer(ctrl *gomock.Controller) *MockSyncer {
	mock := &MockSyncer{ctrl: ctrl}
	mock.recorder = &MockSyncerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSyncer) EXPECT() *MockSyncerMockRecorder {
	return m.recorder
}

// Sync mocks base method
func (m *MockSyncer) Sync(slug comic.CharacterSlug) (int, error) {
	ret := m.ctrl.Call(m, "Sync", slug)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync
func (mr *MockSyncerMockRecorder) Sync(slug interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockSyncer)(nil).Sync), slug)
}
