// Code generated by MockGen. DO NOT EDIT.
// Source: comic/cache.go

// Package mock_comic is a generated GoMock package.
package mock_comic

import (
	redis "github.com/go-redis/redis"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockRedisClient is a mock of RedisClient interface
type MockRedisClient struct {
	ctrl     *gomock.Controller
	recorder *MockRedisClientMockRecorder
}

// MockRedisClientMockRecorder is the mock recorder for MockRedisClient
type MockRedisClientMockRecorder struct {
	mock *MockRedisClient
}

// NewMockRedisClient creates a new mock instance
func NewMockRedisClient(ctrl *gomock.Controller) *MockRedisClient {
	mock := &MockRedisClient{ctrl: ctrl}
	mock.recorder = &MockRedisClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRedisClient) EXPECT() *MockRedisClientMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRedisClient) Get(key string) *redis.StringCmd {
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockRedisClientMockRecorder) Get(key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisClient)(nil).Get), key)
}

// MGet mocks base method
func (m *MockRedisClient) MGet(keys ...string) *redis.SliceCmd {
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGet", varargs...)
	ret0, _ := ret[0].(*redis.SliceCmd)
	return ret0
}

// MGet indicates an expected call of MGet
func (mr *MockRedisClientMockRecorder) MGet(keys ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGet", reflect.TypeOf((*MockRedisClient)(nil).MGet), keys...)
}

// Set mocks base method
func (m *MockRedisClient) Set(key string, value interface{}, expiration time.Duration) *redis.StatusCmd {
	ret := m.ctrl.Call(m, "Set", key, value, expiration)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockRedisClientMockRecorder) Set(key, value, expiration interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRedisClient)(nil).Set), key, value, expiration)
}

// HMSet mocks base method
func (m *MockRedisClient) HMSet(key string, fields map[string]interface{}) *redis.StatusCmd {
	ret := m.ctrl.Call(m, "HMSet", key, fields)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// HMSet indicates an expected call of HMSet
func (mr *MockRedisClientMockRecorder) HMSet(key, fields interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMSet", reflect.TypeOf((*MockRedisClient)(nil).HMSet), key, fields)
}

// HGetAll mocks base method
func (m *MockRedisClient) HGetAll(key string) *redis.StringStringMapCmd {
	ret := m.ctrl.Call(m, "HGetAll", key)
	ret0, _ := ret[0].(*redis.StringStringMapCmd)
	return ret0
}

// HGetAll indicates an expected call of HGetAll
func (mr *MockRedisClientMockRecorder) HGetAll(key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGetAll", reflect.TypeOf((*MockRedisClient)(nil).HGetAll), key)
}

// Del mocks base method
func (m *MockRedisClient) Del(keys ...string) *redis.IntCmd {
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Del", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Del indicates an expected call of Del
func (mr *MockRedisClientMockRecorder) Del(keys ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockRedisClient)(nil).Del), keys...)
}
