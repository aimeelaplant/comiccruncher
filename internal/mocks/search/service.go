// Code generated by MockGen. DO NOT EDIT.
// Source: search/service.go

// Package mock_search is a generated GoMock package.
package mock_search

import (
	comic "github.com/comiccruncher/comiccruncher/comic"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSearcher is a mock of Searcher interface
type MockSearcher struct {
	ctrl     *gomock.Controller
	recorder *MockSearcherMockRecorder
}

// MockSearcherMockRecorder is the mock recorder for MockSearcher
type MockSearcherMockRecorder struct {
	mock *MockSearcher
}

// NewMockSearcher creates a new mock instance
func NewMockSearcher(ctrl *gomock.Controller) *MockSearcher {
	mock := &MockSearcher{ctrl: ctrl}
	mock.recorder = &MockSearcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSearcher) EXPECT() *MockSearcherMockRecorder {
	return m.recorder
}

// Characters mocks base method
func (m *MockSearcher) Characters(name string, limit, offset int) ([]*comic.Character, error) {
	ret := m.ctrl.Call(m, "Characters", name, limit, offset)
	ret0, _ := ret[0].([]*comic.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Characters indicates an expected call of Characters
func (mr *MockSearcherMockRecorder) Characters(name, limit, offset interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Characters", reflect.TypeOf((*MockSearcher)(nil).Characters), name, limit, offset)
}
