// Code generated by MockGen. DO NOT EDIT.
// Source: auth/auth.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	auth "github.com/aimeelaplant/comiccruncher/auth"
	redis "github.com/go-redis/redis"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRedis is a mock of Redis interface
type MockRedis struct {
	ctrl     *gomock.Controller
	recorder *MockRedisMockRecorder
}

// MockRedisMockRecorder is the mock recorder for MockRedis
type MockRedisMockRecorder struct {
	mock *MockRedis
}

// NewMockRedis creates a new mock instance
func NewMockRedis(ctrl *gomock.Controller) *MockRedis {
	mock := &MockRedis{ctrl: ctrl}
	mock.recorder = &MockRedisMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRedis) EXPECT() *MockRedisMockRecorder {
	return m.recorder
}

// HMSet mocks base method
func (m *MockRedis) HMSet(key string, fields map[string]interface{}) *redis.StatusCmd {
	ret := m.ctrl.Call(m, "HMSet", key, fields)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// HMSet indicates an expected call of HMSet
func (mr *MockRedisMockRecorder) HMSet(key, fields interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMSet", reflect.TypeOf((*MockRedis)(nil).HMSet), key, fields)
}

// Exists mocks base method
func (m *MockRedis) Exists(keys ...string) *redis.IntCmd {
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exists", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Exists indicates an expected call of Exists
func (mr *MockRedisMockRecorder) Exists(keys ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockRedis)(nil).Exists), keys...)
}

// MockTokenRepository is a mock of TokenRepository interface
type MockTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTokenRepositoryMockRecorder
}

// MockTokenRepositoryMockRecorder is the mock recorder for MockTokenRepository
type MockTokenRepositoryMockRecorder struct {
	mock *MockTokenRepository
}

// NewMockTokenRepository creates a new mock instance
func NewMockTokenRepository(ctrl *gomock.Controller) *MockTokenRepository {
	mock := &MockTokenRepository{ctrl: ctrl}
	mock.recorder = &MockTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTokenRepository) EXPECT() *MockTokenRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockTokenRepository) Create(t *auth.Token) error {
	ret := m.ctrl.Call(m, "Create", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockTokenRepositoryMockRecorder) Create(t interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTokenRepository)(nil).Create), t)
}

// Exists mocks base method
func (m *MockTokenRepository) Exists(uuid string) (bool, error) {
	ret := m.ctrl.Call(m, "Exists", uuid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockTokenRepositoryMockRecorder) Exists(uuid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockTokenRepository)(nil).Exists), uuid)
}
