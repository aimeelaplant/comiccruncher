// Code generated by MockGen. DO NOT EDIT.
// Source: cerebro/characterissue.go

// Package mock_cerebro is a generated GoMock package.
package mock_cerebro

import (
	cerebro "github.com/comiccruncher/comiccruncher/cerebro"
	comic "github.com/comiccruncher/comiccruncher/comic"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCharacterVendorExtractor is a mock of CharacterVendorExtractor interface
type MockCharacterVendorExtractor struct {
	ctrl     *gomock.Controller
	recorder *MockCharacterVendorExtractorMockRecorder
}

// MockCharacterVendorExtractorMockRecorder is the mock recorder for MockCharacterVendorExtractor
type MockCharacterVendorExtractorMockRecorder struct {
	mock *MockCharacterVendorExtractor
}

// NewMockCharacterVendorExtractor creates a new mock instance
func NewMockCharacterVendorExtractor(ctrl *gomock.Controller) *MockCharacterVendorExtractor {
	mock := &MockCharacterVendorExtractor{ctrl: ctrl}
	mock.recorder = &MockCharacterVendorExtractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCharacterVendorExtractor) EXPECT() *MockCharacterVendorExtractorMockRecorder {
	return m.recorder
}

// Extract mocks base method
func (m *MockCharacterVendorExtractor) Extract(sources []*comic.CharacterSource) (cerebro.CharacterVendorInfo, error) {
	ret := m.ctrl.Call(m, "Extract", sources)
	ret0, _ := ret[0].(cerebro.CharacterVendorInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Extract indicates an expected call of Extract
func (mr *MockCharacterVendorExtractorMockRecorder) Extract(sources interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extract", reflect.TypeOf((*MockCharacterVendorExtractor)(nil).Extract), sources)
}
